#KNearestNeighbours (KNN)

import numpy as np
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.2, random_state = 4)
from sklearn.neighbors import KNeighborsClassifier
from sklearn import metrics
Ks = 10
mean_acc = np.zeros((Ks-1))
std_acc = np.zeros((Ks-1))
for n in range(1, Ks):
    neigh = KNeighborsClassifier (n_neighbors = n).fit(X_train, y_train)
    yhat = neigh.predict(X_test)
    mean_acc[n-1] = metrics.accuracy_score(y_test, yhat)
    std_acc[n-1]=np.std(yhat==y_test)/np.sqrt(yhat.shape[0])
    plt.plot(range(1,Ks),mean_acc,'g')
    
plt.fill_between(range(1,Ks),mean_acc - 1 * std_acc,mean_acc + 1 * std_acc, alpha=0.10)
plt.legend(('Accuracy ', '+/- 3xstd'))
plt.ylabel('Accuracy ')
plt.xlabel('Number of Neighbors (K)')
plt.tight_layout()
plt.show()

k = 7
neighbor = KNeighborsClassifier(n_neighbors = k).fit(X_train, y_train)
yhat2 = neighbor.predict(X_test)
yhat2[0:5]


#DecisionTree 
from sklearn.tree import DecisionTreeClassifier
X_trainset, X_testset, y_trainset, y_testset = train_test_split(X,y, test_size = 0.3, random_state = 3)
loanTree = DecisionTreeClassifier(criterion="entropy", max_depth = 4)
loanTree.fit(X_trainset, y_trainset)

predictTree = loanTree.predict(X_testset)
print (predictTree [0:5])
print (y_testset [0:5])

from sklearn import metrics
import matplotlib.pyplot as plt
print("DecisionTrees's Accuracy: ", metrics.accuracy_score(y_testset, predictTree))

#Support Vector Machine 

X_training, X_testing, y_training, y_testing = train_test_split(X,y, test_size = 0.3, random_state = 3)
from sklearn import svm
clf = svm.SVC(kernel = 'linear')
clf.fit(X_training, y_training)
yh = clf.predict(X_testing)
yh[0:5]

#Logistic Regression

X_trainingset, X_testingset, y_trainingset, y_testingset = train_test_split(X,y, test_size = 0.3, random_state = 4)
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix
LR = LogisticRegression(C=0.01, solver='liblinear').fit(X_train,y_train)
LR

y_hat = LR.predict(X_testingset)
y_hat[0:5]

y_hat_prob = LR.predict_proba(X_testingset)
y_hat_prob[0:5]
